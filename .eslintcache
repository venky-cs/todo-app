[{"C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\index.js":"1","C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\App.js":"2","C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\reportWebVitals.js":"3","C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\component\\Main.js":"4","C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\component\\All.js":"5","C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\component\\Active.js":"6","C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\component\\Completed.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":239,"mtime":1612629807165,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":3704,"mtime":1612623387348,"results":"12","hashOfConfig":"9"},{"size":1185,"mtime":1612624875743,"results":"13","hashOfConfig":"9"},{"size":1107,"mtime":1612624994016,"results":"14","hashOfConfig":"9"},{"size":1470,"mtime":1612629587684,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"it0cgr",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\index.js",[],["35","36"],"C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\App.js",[],"C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\reportWebVitals.js",[],"C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\component\\Main.js",["37"],"import React, { useState, useEffect } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport All from './All'\r\nimport Active from './Active'\r\nimport Completed from './Completed'\r\n\r\nexport let TodoContext = ''\r\n\r\nfunction Main() {\r\n    let data = JSON.parse(localStorage.getItem('todo')) || []\r\n    console.log(data)\r\n    // const [state, setState] = useState([data])\r\n    // console.log('state testing.....', state, data)\r\n    const [test, setTest] = useState(false)\r\n\r\n    const [text, setText] = useState('')\r\n    const [list, setList] = useState([])\r\n    const [todo, setTodo] = useState(data);\r\n\r\n    useEffect(() => {\r\n        setTodo(data)\r\n    }, [test])\r\n    TodoContext = React.createContext([todo])\r\n    return (\r\n        <div className=\"main\">\r\n            <h3>#todo</h3>\r\n            <Router>\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/\">All</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/active\">Active</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/completed\">Completed</Link>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n                <div className='input'>\r\n                    <input type=\"text\" placeholder=\"add details\" onChange={createText} value={text}\r\n                    // (e.key === 'Enter' ? text.length >= 1 ? updateList() : null : null)\r\n                    onKeyPress={(e) => {\r\n                        if(e.key === 'Enter' && text.length >=1){\r\n                            updateList();\r\n                            dataRender();\r\n                        }else{\r\n                            console.log('error')\r\n                        }\r\n                    }} />\r\n                    <button onClick={() => {\r\n                        if(text.length >=1){\r\n                            updateList();\r\n                            dataRender()\r\n                        }else{\r\n                            console.log('error')\r\n                        }\r\n                    }\r\n                    }>Add</button>\r\n\r\n                </div>\r\n                <Switch>\r\n                    <TodoContext.Provider value={todo}>\r\n                        <Route exact path=\"/\">\r\n                            <All test={dataRender} />\r\n                        </Route>\r\n                        <Route path=\"/active\">\r\n                            <Active test={dataRender}/>\r\n                        </Route>\r\n                        <Route path=\"/completed\">\r\n                            <Completed test={dataRender}/>\r\n                        </Route>\r\n                    </TodoContext.Provider>\r\n                </Switch>\r\n            </Router>\r\n\r\n        </div>\r\n    )\r\n    function createText(e) {\r\n        setText(e.target.value)\r\n    }\r\n    function updateList() {\r\n        // console.log(\"List\",list,\"Text\",text)\r\n        const generateID = () => Math.random().toString(36).substr(2, 9)\r\n        setList([...list, {\r\n            id: generateID(),\r\n            value: text,\r\n            complete: false\r\n        }]);\r\n        localStorage.setItem(\"todo\", JSON.stringify([...todo, { id: generateID(), value: text, complete: false }]))\r\n\r\n        let lists = localStorage.getItem(\"todo\")\r\n        let parseList = JSON.parse(lists)\r\n        console.log(parseList)\r\n\r\n        setTodo([...data, todo.push({ id: parseList.length, value: parseList.value })])\r\n        setText('')\r\n    }\r\n\r\n\r\n    function dataRender() {\r\n        setTest((prevState) => !prevState)\r\n    }\r\n}\r\n\r\nexport default Main\r\n","C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\component\\All.js",["38"],"import React,{useContext} from 'react'\r\nimport {TodoContext} from './Main'\r\n\r\nfunction All({test}) {\r\n    const context = useContext(TodoContext)\r\n    console.log(\"context Testing....\",context)\r\n    return (\r\n        <div>\r\n            {\r\n                context.map((data) => <div className='list' id={data && data.id} key={data && data.id}\r\n                    onClick={(e) => {\r\n                        let data = JSON.parse(localStorage.getItem('todo'))\r\n                        let value = e.target.id;\r\n                        data.map(data => {\r\n                            if (data.id === value) { data.complete = true };\r\n                        })\r\n                        // data.id[value].complete = true;\r\n                        localStorage.setItem('todo', JSON.stringify(data))\r\n                        test()\r\n                    }}>\r\n                    <input id={data && data.id} type='checkbox' checked={data && data.complete}/>\r\n                    <label id={data && data.id} style={data&& data.complete ?{textDecoration:'line-through'} :null}>{data && data.value}</label>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default All\r\n","C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\component\\Active.js",["39"],"import React,{useContext} from 'react'\r\nimport { TodoContext } from './Main'\r\n\r\nfunction Active({test}) {\r\n    \r\n    const context = useContext(TodoContext)\r\n    let contextFilter = context.filter((data) => data && data.complete === false)\r\n    return (\r\n        <div>\r\n            {/* <Input /> */}\r\n            {contextFilter.map((data) => <div className='list' id={data &&data.id} key={data &&data.id} \r\n            onClick={(e) => {\r\n                let data = JSON.parse(localStorage.getItem('todo'))\r\n                let value = e.target.id;\r\n                data.map(data => {\r\n                    if (data.id === value) { data.complete = true };\r\n                })\r\n                    localStorage.setItem('todo',JSON.stringify(data))\r\n                    test()\r\n                }}>\r\n                <input type='checkbox' id={data &&data.id} checked={data &&data.complete} />\r\n                <label id={data &&data.id} style={data &&data.complete ? { textDecoration: 'line-through' } : null}>{data &&data.value}</label>\r\n            </div>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Active\r\n","C:\\Users\\venky\\Downloads\\todo-app-master\\todo-app\\src\\component\\Completed.js",["40","41"],"import React,{useContext} from 'react'\r\nimport { TodoContext } from './Main'\r\n\r\nfunction Completed({test}) {\r\n    const context = useContext(TodoContext)\r\n    let contextFilter = context.filter((data) => data && data.complete === true)\r\n    return (\r\n        <div>\r\n            {contextFilter.map((data) => <div className='list' onClick={(e) => (console.log(e.target.innerHTML))}>\r\n                <input type='checkbox' checked={data && data.complete} />\r\n                <label style={data && data.complete ? { textDecoration: 'line-through' } : null}>{data && data.value}</label>\r\n                <button className=\"delBtn\" id={data && data.id} onClick={(e) => {\r\n                    let data = JSON.parse(localStorage.getItem('todo'))\r\n                    let value = e.target.id;\r\n                    // data[value] = data.pop();\r\n                    const newTask=[]\r\n                    data.map(data => {\r\n                        let id = data.id;\r\n                        if(id != value){\r\n                            newTask.push(data)\r\n                        }\r\n                    })\r\n                    localStorage.setItem('todo', JSON.stringify(newTask))\r\n                    test()\r\n                }}>Delete</button>\r\n            </div>\r\n            )}\r\n            <button className=\"delBtn\" onClick={() =>{\r\n            localStorage.removeItem('todo')\r\n            test()}}>Delete All</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Completed\r\n",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":22,"column":8,"nodeType":"48","endLine":22,"endColumn":14,"suggestions":"49"},{"ruleId":"50","severity":1,"message":"51","line":14,"column":39,"nodeType":"52","messageId":"53","endLine":14,"endColumn":41},{"ruleId":"50","severity":1,"message":"51","line":15,"column":31,"nodeType":"52","messageId":"53","endLine":15,"endColumn":33},{"ruleId":"50","severity":1,"message":"51","line":17,"column":35,"nodeType":"52","messageId":"53","endLine":17,"endColumn":37},{"ruleId":"54","severity":1,"message":"55","line":19,"column":31,"nodeType":"56","messageId":"57","endLine":19,"endColumn":33},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["60"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},"Update the dependencies array to be: [data, test]",{"range":"63","text":"64"},[702,708],"[data, test]"]